Q ) What is an Variable

A variable is like a container or box that stores some data (value).

In programming, we use variables to store information that we can use later.

For example:

let age = 18;

Here:

    age is the variable name
    18 is the value stored inside it
    let tells JavaScript that we are creating a variable

So you can think of it like — we made a box named age, and we kept the number 18 inside it.

Q ) types of variables in JavaScript

In JavaScript, we can create variables in 3 ways:

    var
    let
    const

They all store data, but they behave a bit differently.

🧩 1. var

    It is the old way of making variables.
    You can change its value anytime.
    It can also be used before you declare it (but that’s risky).

    👉 Example:

    var name = "Krishna";
    name = "Rahul"; // value changed

📦 Think of it like an open box — you can change what’s inside whenever you want.

🧩 2. let

    It is the modern way (better than var).
    You can change its value, but
    You cannot use it before declaring it.

    👉 Example:

    let age = 18;
    age = 20; // works fine

📦 Think of it like a box with your name on it — only you can open it after you create it, but you can still change what’s inside.

🧩 3. const

    It means constant (the value cannot be changed).
    Once you give it a value, it stays the same forever.

    👉 Example:

    const country = "India";
    country = "USA"; // ❌ Error! You can’t change it

📦 Think of it like a sealed jar — once you put something inside and close it tightly, you can’t change what’s inside.

Q ) when to use var, let, and const (best practices)

In modern JavaScript, developers mostly use let and const.
var is old and outdated, so we usually avoid it.

🧩 1. Use const when value never changes

    Use it for things that stay the same always.
    It makes your code safe and predictable.

    👉 Example:

    const pi = 3.14;
    const country = "India";

These values will never change, so we use const.

🧠 Think of it like writing with a permanent marker — once written, you can’t erase it.

🧩 2. Use let when value can change

    Use it for data that might update during your program.

    👉 Example:

    let age = 18;
    age = 19; // you can change it

🧠 Think of it like writing with a pencil — you can erase and write again.

🧩 3. Avoid var

    var can cause confusion and errors because it behaves weirdly (it doesn’t follow block rules properly).

    Modern JavaScript prefers let and const for better control.

    👉 Example (why not use var):

    if (true) {
    var x = 10;
    }
    console.log(x); // still works outside the block (not safe)

🧠 Think of it like leaving your stuff anywhere in the house — others can access it accidentally.

Q ) variable naming rules

When you create a variable in JavaScript (or any language), you must follow some naming rules — like naming your pet 🐶 — you can’t just use any random symbols!

✅ 1. Variable name must start with a:

    Letter (a–z or A–Z)
    Underscore (_)
    Dollar sign ($)

👉 Examples:

    let name = "Krishna";
    let _age = 18;
    let $city = "Pune";

❌ 2. Variable name cannot start with a number

👉 Example:

let 1name = "Rahul"; // ❌ wrong
let name1 = "Rahul"; // ✅ correct

Think of it like — in real life, a person’s name can’t start with a number, right? You can’t say someone’s name is 1Rahul 😂

✅ 3. Variable names are case-sensitive

That means:

    let age = 18;
    let Age = 25;

Here, age and Age are two different variables.

🧠 Think of it like having two friends — Ram and RAM — their names look similar, but they’re not the same person.

❌ 4. You cannot use keywords as names

Keywords are special words JavaScript already uses, like let, var, if, for, function, etc.

    👉 Example:

    let var = 10; // ❌ wrong
    let number = 10; // ✅ correct

🧠 Think of it like — you can’t name your pet “Police” 🚓 because that word already has a special meaning.

✅ 5. Use meaningful names

Always give names that describe what the variable stores.

    👉 Example:

    let s = 100; // ❌ confusing  
    let score = 100; // ✅ clear

🧠 Think of it like labeling your kitchen jars — if you write “Sugar” and “Salt,” you’ll know exactly what’s inside!

Q ) Data Types in JavaScript

A data type means the kind of value that a variable stores.
It tells JavaScript what type of data is inside the variable — a number, text, true/false, etc.

🧠 JavaScript has 2 Main Types of Data:
1️⃣ Primitive Data Types

(Simple & Basic)

Data Type

Number	
let age = 20;	
Stores numbers (integer or decimal)	
Your age or bank balance 💰

String	
let name = "Krishna";	
Stores text	
Your name on an ID card 🪪

Boolean	
let isStudent = true;	
Only true or false	
Light switch: ON (true) or OFF (false) 💡

Undefined	
let x;	
Declared but not given value	
An empty jar 🫙 with no label

Null	
let car = null;	
Empty or no value	
A jar that you purposely made empty

Symbol	
let id = Symbol("abc");	
Used for unique values	
Your unique fingerprint 🧬

BigInt	
let bigNum = 12345678901234567890n;	
Very large numbers	
Counting stars in the sky 🌌

2️⃣ Non-Primitive (Reference) Data Types

(Used for storing collections or complex data)

Data Type

Object	
let person = { name: "Krishna", age: 18 };	
Stores data in key-value pairs	
A person’s record card (Name + Age) 📇

Array	
let fruits = ["apple", "banana", "mango"];	
Stores multiple values in one variable	
A list of fruits in a basket 🍎🍌🥭

Function	
function greet() { console.log("Hello!"); }	
A block of code that runs when called	
A washing machine — press the button, and it works 🧺