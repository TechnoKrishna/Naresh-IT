🧩 1. What Are Access Modifiers in Java?

Definition:
Access Modifiers decide who can access a class, method, or variable in Java.

In short → They control the visibility of your code to other parts of the program.

📘 Example for Understanding:

Think of your Java class as a house 🏠

Private → Only you (the owner) can enter.
Default → Only your neighbors in the same colony (package) can enter.
Protected → Your neighbors and your relatives (subclasses from another city/package) can enter.
Public → Anyone in the world can enter.

🚦 2. Four Types of Access Modifiers

| Access Modifier | Same Class | Same Package | Other Package             | Everywhere |
| --------------- | ---------- | ------------ | ------------------------- | ---------- |
| private         | ✅ Yes      | ❌ No         | ❌ No                      | ❌ No       |
| default         | ✅ Yes      | ✅ Yes        | ❌ No                      | ❌ No       |
| protected       | ✅ Yes      | ✅ Yes        | ✅ Yes (using inheritance) | ❌ No       |
| public          | ✅ Yes      | ✅ Yes        | ✅ Yes                     | ✅ Yes      |

🔒 3. Private Access Modifier

Definition:

    The most restrictive modifier.
    A private member (variable or method) can be used only inside the same class.

Rules:

    You cannot make an outer class private.
    Usually used for data hiding (security).

Example:

class BankAccount {
    private double balance = 5000; // private field

    private void showBalance() {   // private method
        System.out.println(balance);
    }

    public void accessBalance() {
        showBalance(); // allowed (same class)
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount acc = new BankAccount();
        acc.accessBalance(); // ✅ allowed
        // acc.showBalance(); ❌ error (private)
    }
}

🧠 Real-Life Example:
Your bank account balance is private — only you can see it, not others. The ATM (public method) can show it to you, but others can’t directly check it.

📦 4. Default Access Modifier (Package-Private)

Definition:

If you don’t write any modifier, Java automatically assumes it is default.
Accessible only within the same package.

// File: com/blc/Test.java
package com.blc;

public class Test {
    int x = 100; // default access
}

// File: com/blc/Main.java
package com.blc;

public class Main {
    public static void main(String[] args) {
        Test t = new Test();
        System.out.println(t.x); // ✅ allowed (same package)
    }
}

🧠 Real-Life Example:
Think of this like a gated community 🏘️ — only people living in the same colony (package) can visit each other’s homes.

🧬 5. Protected Access Modifier

Definition:

    Less restrictive than default.
    Members declared as protected can be accessed:
    within the same package ✅
    and in other packages through inheritance ✅

// File: com/blc/Test.java
package com.blc;

public class Test {
    protected int x = 500;
}

// File: com/elc/ELC.java
package com.elc;

import com.blc.Test;

public class ELC extends Test { // inheritance
    public static void main(String[] args) {
        ELC e = new ELC();
        System.out.println(e.x); // ✅ allowed through inheritance
    }
}

🧠 Real-Life Example:

Imagine a family password.
Your family (same package) can use it directly.
Your children (subclass in another city/package) can also use it, but only because they’re related (inheritance).

🌍 6. Public Access Modifier

Definition:

No restrictions at all.
Members declared as public are accessible from everywhere.

package com.blc;

public class Student {
    public int roll = 101;
    public String name = "John";
}

package com.elc;

import com.blc.Student;

public class Demo {
    public static void main(String[] args) {
        Student s = new Student();
        System.out.println(s.roll + " " + s.name); // ✅ accessible from anywhere
    }
}

🧠 Real-Life Example:
Like a public park — anyone from anywhere can visit.

🧱 7. Summary: Object-Oriented Rules

Classes and methods → usually declared as public

Fields (variables) → should be private or protected for security

Private methods used for internal work → called Helper Methods

Example:
A validateUser() method in a class can be private since it’s used internally before login.

⚙️ 8. Non-Access Modifiers

Apart from the four access modifiers, Java also has non-access modifiers, such as:

final

static

abstract

synchronized

transient

volatile

➡️ These control behavior (not visibility).

🧾 9. Printing Object Properties Using toString()

Purpose:
To print an object’s data (non-static fields) directly without writing a separate display method.

Why:
By default, when you print an object, Java prints something like
com.blc.Manager@15db9742 (not readable).
So we override the toString() method to display object data clearly.

Example Code:
package com.blc;

public class Manager {

    public int managerId;
    private String managerName;
    private double managerSalary;

    public void setManagerData(int id, String name, double salary) {
        managerId = id;
        managerName = name;
        managerSalary = salary;
    }

    // Overriding toString() method
    public String toString() {
        return "Manager [managerId=" + managerId +
               ", managerName=" + managerName +
               ", managerSalary=" + managerSalary + "]";
    }
}

package com.elc;

import com.blc.Manager;

public class ManagerDemo {
    public static void main(String[] args) {
        Manager smith = new Manager();
        smith.setManagerData(101, "Mr Smith", 89000);
        System.out.println(smith); // Automatically calls smith.toString()
        System.out.println("...");

        Manager alen = new Manager();
        alen.setManagerData(102, "Mr Alen", 95000);
        System.out.println(alen); // Automatically calls alen.toString()
    }
}

Output:

Manager [managerId=101, managerName=Mr Smith, managerSalary=89000.0]
...
Manager [managerId=102, managerName=Mr Alen, managerSalary=95000.0]

🧠 Real-Life Example:

Think of toString() as your business card 🪪

Without it, people only see your ID number (object reference).

With it, people can see your full details (name, position, etc.).

🎯 Final Summary

| Modifier  | Access Scope              | Real-Life Example                     |
| --------- | ------------------------- | ------------------------------------- |
| private   | Same class only           | Your ATM PIN                          |
| default   | Same package              | Residents of same colony              |
| protected | Same package + subclasses | Family password shared with relatives |
| public    | Everywhere                | Public park                           |
